
#! /bin/sh
""":"
exec python $0 ${1+"$@"}
"""

# This file is part of indicator-weather.
# Indicator Weather is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# Indicator Weather is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.  <http://www.gnu.org/licenses/>
#
# Author(s):
# (C) 2015 Kasra Madadipouya <kasra@madadipouya.com>

import sys
import urllib
import json
import gi
from preference import Dialog
from configuration import Configuration
from gi.repository import Gtk, GLib
gi.require_version('Gtk', '3.0')
from gi.repository import AppIndicator3 as appIndicator

PING_FREQUENCY = 600 # 10 minutes

class WeatherIndicator:
   
    def __init__(self):
        self.configuration = Configuration()

        self.indicator = appIndicator.Indicator.new(("weather-indicator"),
            ("weather-indicator"), appIndicator.IndicatorCategory.OTHER)
        self.indicator.set_status(appIndicator.IndicatorStatus.ACTIVE)
        self.indicator.set_icon("weather-clear")
        self.menu_setup()
        self.indicator.set_menu(self.menu)

    def menu_setup(self):
        self.menu = Gtk.Menu()

        self.temp_item = Gtk.MenuItem("")
        self.temp_item.show()
        self.menu.append(self.temp_item)

        self.preference_item = Gtk.MenuItem("Preference")
        self.preference_item.connect("activate", self.preference)
        self.preference_item.show()
        self.menu.append(self.preference_item)

        self.quit_item = Gtk.MenuItem("Quit")
        self.quit_item.connect("activate", self.quit)
        self.quit_item.show()
        self.menu.append(self.quit_item)
    
    def main(self):
        self.get_weather()
        GLib.timeout_add_seconds(PING_FREQUENCY, self.get_weather)
        Gtk.main()

    def quit(self, widget):
        sys.exit(0)


    def preference(self, widget):
        preference_dialog = Dialog()
        preference_dialog.main()
        self.configuration = Configuration()
        self.get_weather()


    def get_weather(self):
        if(self.configuration.is_automatic_location_detection()):
            latitude,longitude = self.get_location()
        else:
            latitude = str(self.configuration.get_latitude())
            longitude = str(self.configuration.get_longitude())
        url = 'http://weatherwebservicecall.herokuapp.com/current?lat=' + latitude + '&lon=' + longitude
        if(self.configuration.get_temperature_scale() == 1):
            url += '&fahrenheit=true'
        u = urllib.urlopen(url)
        data = u.read()
        j = json.loads(data)
        temp = j['temperature']
        city = j['geoLocation']
        icon_name = j['iconName']
        icon_name = self.get_icon_name_local(icon_name)
        if city :
        	city = city.strip().split(",")
        if(self.configuration.get_temperature_scale() == 0):
            degree = u"\u2103"
        else:
            degree = u"\u2109"

        if city :
        	rtn_val = str(temp) + degree + ' ' + city[1]
        else :
        	rtn_val = str(temp) + degree + ' ' + city
        self.indicator.set_label(rtn_val, rtn_val)
        self.indicator.set_icon(icon_name)
        self.temp_item.get_child().set_text(rtn_val)

    def get_icon_name_local(self, icon_name):
        if icon_name == "01d":
            return "weather-clear"
        elif icon_name == "01n":
            return "weather-clear-night"
        elif icon_name == "02d":
            return "weather-few-clouds"
        elif icon_name == "02n":
            return "weather-few-clouds-night"
        elif icon_name in ("03d", "03n"):
            return "ubuntuone-client-idle"
        elif icon_name in ("04d", "04n"):
            return "weather-overcast"
        elif icon_name in ("09d", "09n"):
            return "weather-showers"
        elif icon_name in ("10d", "10n"):
            return "weather-showers-scattered"
        elif icon_name in ("11d", "11n"):
            return "weather-storm"
        elif icon_name in ("13d", "13n"):
            return "weather-snow"
        elif icon_name in ("50d", "50n"):
            return "weather-fog"
    
    def get_location(self):
        
        try:
        	url = 'http://ipinfo.io/json/'
        	u = urllib.urlopen(url)
        	data = u.read()
        	j = json.loads(data)
        	loc = j['loc']
        	y = loc.strip().split(",")
        	lat = y[0]
        	lon = y[1]
        	return (lat,lon)
        except:
            return False,0

if __name__ == "__main__":
    indicator = WeatherIndicator()
    indicator.main()
